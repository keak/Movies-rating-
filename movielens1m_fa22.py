# -*- coding: utf-8 -*-
"""MovieLens1M_FA22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IsPQ6q4o2fNIOZ89-kWpk0Zsh3swAs1c

# MIS0855 Data Science. Fall 2022
# *Final Project. MovieLens1M*

## Preparation
The files you need: ratings.dat, movies3.csv, users.dat. These three files must be uploaded every time. ratings.data and users.dat should be downloaded from MovieLens site.
An alternative to uploading data files: mount Google drive (see below).
"""

### Two methods to access the data files. 1) Upload files. 2) Google drive mount.
from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/mis0855   # Linux command

"""###Other useful Linux commands

*   !pwd    
means print working directory.
*   %cd     
means change directory.
*   !ls     
means list file/directory
*   !mkdir setagaya     
means make a new directory named setagaya
*   !python --version     
checks the version of Python running in Colab





"""

!python --version

"""##Step 1. Is your favorite movie in this data set?"""

import pandas as pd
import numpy as np
pd.options.display.max_rows = 40

### Setting up movies file. Data 1 out of 3. This not the original MovieLens file.
movies = pd.read_csv('movies3.csv')

### Let's take a look at the data. The first 5 movies
movies[:10]

### Check. How many movies are there in the dataset?
movies.count()

### Is your favorite movie in the database? Using the word 'paradiso' as an example. It's not case sensitive.
### Make a note of the movie_id, genres, and year of your favorite movie.
### Use more generic words (such as 'family', 'love', 'river') and more movies should appear.

title = movies.loc[movies['title'].str.contains('2001: A Space Odyssey', case=False)]
title

"""##Step 2. Processing two other data sets and creating a merged master data file"""

### Setting up the users file. Data 2 out of 3. The data file ('users.dat') must be downloaded from MovieLens site.
### following McKinney. adding "engine = 'python'

unames = ['user_id', 'gender', 'age', 'occupation', 'zip']
users = pd.read_table('users.dat', sep='::', header=None, names = unames, engine = 'python')

### Check. Here are the first 5 users. To interpret the age and occupation, consult the ReadMe file.
users[:5]

### Check. How many users are there? How many pieces of info are available?
users.count()

### Exercise. Using value_counts(), see how many female and male users there are.
users.gender.value_counts(normalize=True)

### Setting up ratings data. Data 3 out of 3. The data file ('ratings.dat') must be downloaded from MovieLens site.
### following McKinney. adding "engine = 'python'

rnames = ['user_id', 'movie_id', 'rating', 'timestamp']
ratings = pd.read_table('ratings.dat', sep='::', header=None, names= rnames, engine = 'python')

### Check. The first 5 ratings. User_id 1 has watched and rated the movies 1193, 661, 914, 3408.....
ratings[:5]

### Check.  How many ratings are there?
ratings.count()

"""### Putting it all together. Merge the three files (ratings, movies, users)"""

### Creating master dataset
df = pd.merge(pd.merge(ratings, users), movies) # the master dataset (a data frame) is now called df

### Let's look at the df
df

### Let's look at the shape of the data. # of rows and # of columns
df.shape

### let's look at the data type of each column. 'object' is string. 'int64' is integer
df.dtypes

"""##Step 3. Explore the master dataset"""

### Calculate the averaging rating for men and women separately. Are there movies loved by women but hated by men (and vice versa)?

mean_rating = df.pivot_table('rating', index = 'title', columns = 'gender', aggfunc ='mean')
mean_rating.sort_values('F', ascending = False)

mean_rating[:10]

"""### Creating a subset. The ratings of your favorite movie."""

### How many ratings are there for my favorite movie?
### First, run the sample code ('Cinema Paradiso (1988')) and write your own code. In your final project, the movie must have at least 250 ratings.

df.loc[df['title'] == '2001: A Space Odysse (168)'].count()   # using movie title
df.loc[df['movie_id'] == 924].count()  # using movie_id

### Creating a subset of the data. This has only the ratings for my favorite movie
### First, run the sample code ('Cinema') and then write your own code. Change the df name.

# df_p = df.loc[df['title'] == 'Cinema Paradiso (1988)']   # using title
df_p = df.loc[df['movie_id'] == 924]  # using movie_id

### Exporting as a csv file
df_p.to_csv('df_p.csv')

"""##Step 4. Genre or release year comparison. How does the target movie (in this example 'Cinema Paradiso') compare to the movies in the same genre (in this example 'Comedy|Drama|Romance') OR the movies released in the same year (1988)?

### Genre comparison
"""

### Compare by genre
### The genre of the movie 'Cinema Paradiso' is Comedy|Drama|Romance. What other genres are there and how many movies?

genres = movies.genres.value_counts()  #Make sure to use movies, not df
genres.head(20)

### Create a genre subset. In this example, movie rating subset data frame is created. This df (df_CDR) has ratings of CDR movies only.
### Run the sample code, and then write your own (what is the genre of your favorite movie?)
# df_Action=df.loc[df['genres']=='Action']
# df_Action.title.value_counts()
df_My = df.loc[df['genres'] == 'Mystery']
df_My.title.value_counts()   #Some of the CDR movies with large numbers of ratings

### Create a genre subset (follow the code in the cell above). Your favorite movie's genre

### Descriptive statistics. The average rating of all CDR movies is 3.67.
df_My.rating.describe()

### Descriptive statistics. Your movie's genre

### Comedy/Drama/Romance
### Calculating the average rating for men and women separately. Which CDR movies are highly rated by men (and women)?
meanMy = df_My.pivot_table('rating', index = 'title', columns ='gender', aggfunc='mean')
meanMy.sort_values('M', ascending = False)

### Your movie's genre
### Calculating the average rating for men and women separately. Which ____movies are highly rated by men (and women)?

"""### Year comparison"""

### Compare by year

df1988 = df.loc[df['year'] == 1988]          #All movies released in 1988 (ratings)
df1988.title.value_counts()

### Compare by year
### Descriptive statistics. The average rating of all movies released in 1988 is 3.54.

df1988.rating.describe()

"""##Step 5. More detailed analysis of the target movie"""

### Check. This movie Cinema Paradiso has 615 ratings. How many ratings does your favorite movie have?
df_p.count()   #change 'df_p' to your movixe's df name

### Frequencey distribution of ratings
# df_p.rating.value_counts().sort_index()
# df_p.rating.value_counts().sort_index(ascending=True)
df_p.rating.value_counts(normalize = True).sort_index(ascending=True)

### Frequency distribution visualized
df_p.rating.value_counts(normalize = True).sort_index(ascending=True).plot.bar()

### Frequency distribution of ratings. Normalized
df_p.rating.value_counts(normalize=True).sort_index(ascending=True)

### Descriptive statistics
df_p.rating.describe()

"""### Compare by gender"""

### Cross tabulation. Ratings by gender
import pandas as pd

cross1 = pd.crosstab(df_p['rating'], df_p['gender'], normalize = 'columns')  #  . 51% of women and 47% of men gave 'Cinema' five stars.
cross1 # show me the result

cross1.plot.bar()  #visualize the above cross tabulation result

### Average by gender
df_p.groupby('gender')['rating'].mean()

### Descriptive by gender
df_p.groupby('gender')['rating'].describe()

### Ratings by women only

df_pf = df_p.loc[df['gender'] == 'F']
df_pf['rating'].value_counts()

### Ratings by men only

df_pm = df_p.loc[df['gender'] == 'M']
df_pm['rating'].value_counts()

"""### Compare by age"""

### Ratings by age category. How many users in ___ age category rated the target movie? To interpret the age category, see 'ReadMe'

df_p.age.value_counts()

### Average rating by age group. Users in which age group gave this movie higher or lower average rating?
age = df_p.groupby('age')['rating'].mean()
age
age.plot.bar() # I don't see any significant age effect

"""### Compare by occupation"""

### Ratings by occupation. How many users in ___ occupation category rated the target movie? To interpret the occupation category, see 'ReadMe'
### The movie 'Cinema' was rated frequently by users in the age categories 0, 1, 2, 4, 7.
df_p.occupation.value_counts().sort_index(ascending = True)

### Average rating by occupation. Users in what kind of occupation gave this movie higher or lower average rating?
occupation = df_p.groupby('occupation')['rating'].mean()
occupation.sort_index(ascending=True)